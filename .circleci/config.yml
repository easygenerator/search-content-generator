version: 2.0

defaults: &defaults
  docker:
    - image: circleci/node:latest

jobs:
  test:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            npm install

      - run: 
          name: Run tests
          command: npm test

  deploy-development:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            npm ci

      - run:
          name: Install Serverless CLI
          command: |
            sudo npm i -g serverless

      - run:
          name: Deploy development application 
          command: |
            env AWS_BUCKET_SUFFIX="$AWS_BUCKET_SUFFIX" \
            env AWS_DEFAULT_ROLE_ARN="$DEVELOPMENT_AWS_DEFAULT_ROLE_ARN" \
            env AWS_REGION="DEVELOPMENT_AWS_REGION" \
            env AWS_ACCESS_KEY_ID="$DEVELOPMENT_AWS_ACCESS_KEY_ID" \
            env AWS_SECRET_ACCESS_KEY="$DEVELOPMENT_AWS_SECRET_ACCESS_KEY" \
            serverless deploy --conceal

  cleanup-development:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            npm ci

      - run:
          name: Install Serverless CLI
          command: |
            sudo npm i -g serverless

      - run:
          name: Cleanup development application 
          command: |
            env AWS_BUCKET_SUFFIX="$AWS_BUCKET_SUFFIX" \
            env AWS_DEFAULT_ROLE_ARN="$DEVELOPMENT_AWS_DEFAULT_ROLE_ARN" \
            env AWS_REGION="DEVELOPMENT_AWS_REGION" \
            env AWS_ACCESS_KEY_ID="$DEVELOPMENT_AWS_ACCESS_KEY_ID" \
            env AWS_SECRET_ACCESS_KEY="$DEVELOPMENT_AWS_SECRET_ACCESS_KEY" \
            serverless remove --conceal

  deploy-staging:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            npm ci

      - run:
          name: Install Serverless CLI
          command: |
            sudo npm i -g serverless

      - run:
          name: Deploy staging application 
          command: |
            env AWS_BUCKET_SUFFIX="$AWS_BUCKET_SUFFIX" \
            env AWS_DEFAULT_ROLE_ARN="$STAGING_AWS_DEFAULT_ROLE_ARN" \
            env AWS_REGION="STAGING_AWS_REGION" \
            env AWS_ACCESS_KEY_ID="$STAGING_AWS_ACCESS_KEY_ID" \
            env AWS_SECRET_ACCESS_KEY="$STAGING_AWS_SECRET_ACCESS_KEY" \
            serverless deploy --conceal --stage staging

  deploy-production:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            npm ci

      - run:
          name: Install Serverless CLI
          command: |
            sudo npm i -g serverless

      - run:
          name: Deploy production application 
          command: |
            env AWS_BUCKET_SUFFIX="$AWS_BUCKET_SUFFIX" \
            env AWS_DEFAULT_ROLE_ARN="$PRODUCTION_AWS_DEFAULT_ROLE_ARN" \
            env AWS_REGION="PRODUCTION_AWS_REGION" \
            env AWS_ACCESS_KEY_ID="$PRODUCTION_AWS_ACCESS_KEY_ID" \
            env AWS_SECRET_ACCESS_KEY="$PRODUCTION_AWS_SECRET_ACCESS_KEY" \
            serverless deploy --conceal --stage production

workflows:
  version: 2
  deploy-development:
    jobs:
      - test:
          context: Environment setup
          filters:
            branches:
              only: development
      - deploy-development:
          context: Environment setup
          requires:
            - test
      - hold:
          type: approval
          requires:
            - deploy-development
      - cleanup-development:
          context: Environment setup
          requires:
            - hold

  deploy-staging:
    jobs:
      - test:
          filters:
            branches:
              only: master
      - deploy-staging:
          requires:
            - test

  deploy-production:
    jobs:
      - test:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - approve-deploy-production:
          type: approval
          requires:
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - deploy-production:
          requires:
            - approve-deploy-production
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/